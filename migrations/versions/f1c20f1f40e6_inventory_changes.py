"""inventory changes

Revision ID: f1c20f1f40e6
Revises: 991c7434f4d3
Create Date: 2023-02-18 13:34:40.589260

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f1c20f1f40e6'
down_revision = '991c7434f4d3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('inventory_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inventory_data_id'), 'inventory_data', ['id'], unique=False)
    op.create_table('tasks_other',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tasks_other_id'), 'tasks_other', ['id'], unique=False)
    op.create_table('inventory_change',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('action', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['inventory_item.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inventory_change_id'), 'inventory_change', ['id'], unique=False)
    op.drop_index('ix_inventory_acquired_id', table_name='inventory_acquired')
    op.drop_table('inventory_acquired')
    op.drop_index('ix_inventory_liquidated_id', table_name='inventory_liquidated')
    op.drop_table('inventory_liquidated')
    op.drop_constraint('block_blocker_id_fkey', 'block', type_='foreignkey')
    op.create_foreign_key(None, 'block', 'tasks_other', ['blocker_id'], ['id'])
    op.add_column('garden_crop', sa.Column('data_id', sa.Integer(), nullable=False))
    op.drop_constraint('garden_crop_item_id_fkey', 'garden_crop', type_='foreignkey')
    op.create_foreign_key(None, 'garden_crop', 'inventory_data', ['data_id'], ['id'])
    op.drop_column('garden_crop', 'item_id')
    op.add_column('inventory_item', sa.Column('data_id', sa.Integer(), nullable=False))
    op.add_column('inventory_item', sa.Column('expires', sa.DateTime(), nullable=True))
    op.create_foreign_key(None, 'inventory_item', 'inventory_data', ['data_id'], ['id'])
    op.drop_column('inventory_item', 'name')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('inventory_item', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'inventory_item', type_='foreignkey')
    op.drop_column('inventory_item', 'expires')
    op.drop_column('inventory_item', 'data_id')
    op.add_column('garden_crop', sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'garden_crop', type_='foreignkey')
    op.create_foreign_key('garden_crop_item_id_fkey', 'garden_crop', 'inventory_item', ['item_id'], ['id'])
    op.drop_column('garden_crop', 'data_id')
    op.drop_constraint(None, 'block', type_='foreignkey')
    op.create_foreign_key('block_blocker_id_fkey', 'block', 'tasks_action', ['blocker_id'], ['id'])
    op.create_table('inventory_liquidated',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['inventory_item.id'], name='inventory_liquidated_item_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='inventory_liquidated_pkey')
    )
    op.create_index('ix_inventory_liquidated_id', 'inventory_liquidated', ['id'], unique=False)
    op.create_table('inventory_acquired',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['inventory_item.id'], name='inventory_acquired_item_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='inventory_acquired_pkey')
    )
    op.create_index('ix_inventory_acquired_id', 'inventory_acquired', ['id'], unique=False)
    op.drop_index(op.f('ix_inventory_change_id'), table_name='inventory_change')
    op.drop_table('inventory_change')
    op.drop_index(op.f('ix_tasks_other_id'), table_name='tasks_other')
    op.drop_table('tasks_other')
    op.drop_index(op.f('ix_inventory_data_id'), table_name='inventory_data')
    op.drop_table('inventory_data')
    # ### end Alembic commands ###
